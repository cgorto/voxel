// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct UpdateCameraDataArgs {
    pub posx: f32,
    pub posy: f32,
    pub posz: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub fov: f32,
}

impl From<UpdateCameraDataArgs> for super::Reducer {
    fn from(args: UpdateCameraDataArgs) -> Self {
        Self::UpdateCameraData {
            posx: args.posx,
            posy: args.posy,
            posz: args.posz,
            roll: args.roll,
            pitch: args.pitch,
            yaw: args.yaw,
            fov: args.fov,
        }
    }
}

impl __sdk::InModule for UpdateCameraDataArgs {
    type Module = super::RemoteModule;
}

pub struct UpdateCameraDataCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `update_camera_data`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait update_camera_data {
    /// Request that the remote module invoke the reducer `update_camera_data` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_update_camera_data`] callbacks.
    fn update_camera_data(
        &self,
        posx: f32,
        posy: f32,
        posz: f32,
        roll: f32,
        pitch: f32,
        yaw: f32,
        fov: f32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `update_camera_data`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UpdateCameraDataCallbackId`] can be passed to [`Self::remove_on_update_camera_data`]
    /// to cancel the callback.
    fn on_update_camera_data(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &f32, &f32, &f32, &f32, &f32, &f32, &f32)
            + Send
            + 'static,
    ) -> UpdateCameraDataCallbackId;
    /// Cancel a callback previously registered by [`Self::on_update_camera_data`],
    /// causing it not to run in the future.
    fn remove_on_update_camera_data(&self, callback: UpdateCameraDataCallbackId);
}

impl update_camera_data for super::RemoteReducers {
    fn update_camera_data(
        &self,
        posx: f32,
        posy: f32,
        posz: f32,
        roll: f32,
        pitch: f32,
        yaw: f32,
        fov: f32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "update_camera_data",
            UpdateCameraDataArgs {
                posx,
                posy,
                posz,
                roll,
                pitch,
                yaw,
                fov,
            },
        )
    }
    fn on_update_camera_data(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &f32, &f32, &f32, &f32, &f32, &f32, &f32)
            + Send
            + 'static,
    ) -> UpdateCameraDataCallbackId {
        UpdateCameraDataCallbackId(self.imp.on_reducer(
            "update_camera_data",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::UpdateCameraData {
                                    posx,
                                    posy,
                                    posz,
                                    roll,
                                    pitch,
                                    yaw,
                                    fov,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, posx, posy, posz, roll, pitch, yaw, fov)
            }),
        ))
    }
    fn remove_on_update_camera_data(&self, callback: UpdateCameraDataCallbackId) {
        self.imp.remove_on_reducer("update_camera_data", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `update_camera_data`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_update_camera_data {
    /// Set the call-reducer flags for the reducer `update_camera_data` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn update_camera_data(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_update_camera_data for super::SetReducerFlags {
    fn update_camera_data(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("update_camera_data", flags);
    }
}
